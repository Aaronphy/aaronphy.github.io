{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/utils/helpers.js","webpack:///./src/components/Bio.js","webpack:///./src/components/Footer.js","webpack:///./src/templates/blog-index.js"],"names":["SEO","meta","image","title","description","slug","lang","query","render","data","siteMetadata","site","metaDescription","metaImage","siteUrl","url","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","formatReadingTime","minutes","cups","Math","round","Array","E","fill","join","formatPostDate","date","Date","prototype","toLocaleDateString","args","day","month","year","filter","Boolean","Bio","style","display","marginBottom","rhythm","maxWidth","React","Component","Footer","marginTop","paddingTop","href","target","rel","BlogIndexTemplate","siteTitle","get","this","langKey","props","pageContext","posts","Layout","location","map","node","fields","key","fontFamily","fontSize","boxShadow","to","frontmatter","timeToRead","dangerouslySetInnerHTML","__html","spoiler"],"mappings":"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","file":"component---src-templates-blog-index-js-04ba3beee33d1f61e455.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport PropTypes from 'prop-types';\nimport {StaticQuery, graphql} from 'gatsby';\n\nconst query = graphql`\n  query GetSiteMetadata {\n    site {\n      siteMetadata {\n        title\n        author\n        description\n        siteUrl\n      }\n    }\n  }\n`;\n\nfunction SEO({meta, image, title, description, slug, lang = 'en'}) {\n  return (\n    <StaticQuery\n      query={query}\n      render={(data) => {\n        const {siteMetadata} = data.site;\n        const metaDescription = description || siteMetadata.description;\n        const metaImage = image ? `${siteMetadata.siteUrl}/${image}` : null;\n        const url = `${siteMetadata.siteUrl}${slug}`;\n        return (\n          <Helmet\n            htmlAttributes={{lang}}\n            {...(title ?\n              {\n                titleTemplate: `%s ‚Äî ${siteMetadata.title}`,\n                title,\n              } :\n              {\n                title: `${siteMetadata.title} ‚Äî A blog by Aaronphy`,\n              })}\n            meta={[\n              {\n                name: 'description',\n                content: metaDescription,\n              },\n              {\n                property: 'og:url',\n                content: url,\n              },\n              {\n                property: 'og:title',\n                content: title || siteMetadata.title,\n              },\n              {\n                property: 'og:description',\n                content: metaDescription,\n              },\n              {\n                name: 'twitter:card',\n                content: 'summary',\n              },\n              // {\n              //   name: 'twitter:creator',\n              //   content: siteMetadata.social.twitter,\n              // },\n              // {\n              //   name: 'twitter:title',\n              //   content: title || siteMetadata.title,\n              // },\n              // {\n              //   name: 'twitter:description',\n              //   content: metaDescription,\n              // },\n            ]\n                .concat(\n                metaImage ?\n                  [\n                    {\n                      property: 'og:image',\n                      content: metaImage,\n                    },\n                    {\n                      name: 'twitter:image',\n                      content: metaImage,\n                    },\n                  ] :\n                  [],\n                )\n                .concat(meta)}\n          />\n        );\n      }}\n    />\n  );\n}\n\nSEO.defaultProps = {\n  meta: [],\n  title: '',\n  slug: '',\n};\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  image: PropTypes.string,\n  meta: PropTypes.array,\n  slug: PropTypes.string,\n  title: PropTypes.string.isRequired,\n};\n\nexport default SEO;\n","export function formatReadingTime(minutes) {\n  let cups = Math.round(minutes / 5);\n  let bowls = 0;\n  if (cups > 5) {\n    return `${new Array(Math.round(cups / Math.E))\n      .fill(\"üç±\")\n      .join(\"\")} ${minutes} min read`;\n  } else {\n    return `${new Array(cups || 1).fill(\"‚òïÔ∏è\").join(\"\")} ${minutes} min read`;\n  }\n}\n\n// `lang` is optional and will default to the current user agent locale\nexport function formatPostDate(date, lang) {\n  if (typeof Date.prototype.toLocaleDateString !== \"function\") {\n    return date;\n  }\n\n  date = new Date(date);\n  const args = [\n    lang,\n    { day: \"numeric\", month: \"long\", year: \"numeric\" }\n  ].filter(Boolean);\n  return date.toLocaleDateString(...args);\n}\n","import React from 'react';\nimport {rhythm} from '../utils/typography';\n\nclass Bio extends React.Component {\n  render() {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          marginBottom: rhythm(2),\n        }}\n      >\n        <p style={{maxWidth: 310}}>Sober</p>\n      </div>\n    );\n  }\n}\n\nexport default Bio;\n","import React from 'react';\nimport {rhythm} from '../utils/typography';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer\n        style={{\n          marginTop: rhythm(2.5),\n          paddingTop: rhythm(1),\n        }}\n      >\n        {/* <div style={{ float: 'right' }}>\n          <a href=\"/rss.xml\" target=\"_blank\" rel=\"noopener noreferrer\">\n            rss\n          </a>\n        </div> */}\n        <a\n          href=\"https://github.com/Aaronphy\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          GitHub\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import {Link, graphql} from 'gatsby';\nimport {formatPostDate, formatReadingTime} from '../utils/helpers';\n\nimport Bio from '../components/Bio';\nimport Footer from '../components/Footer';\nimport Layout from '../components/Layout';\nimport React from 'react';\nimport SEO from '../components/SEO';\nimport get from 'lodash/get';\nimport {rhythm} from '../utils/typography';\n\nclass BlogIndexTemplate extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title');\n    const langKey = this.props.pageContext.langKey;\n\n    const posts = get(this, 'props.data.allMarkdownRemark.edges');\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO />\n        <aside>\n          <Bio />\n        </aside>\n        <main>\n          {posts.map(({node}) => {\n            const title = get(node, 'frontmatter.title') || node.fields.slug;\n            return (\n              <article key={node.fields.slug}>\n                <header>\n                  <h3\n                    style={{\n                      fontFamily: 'Montserrat, sans-serif',\n                      fontSize: rhythm(1),\n                      marginBottom: rhythm(1 / 4),\n                    }}\n                  >\n                    <Link\n                      style={{boxShadow: 'none'}}\n                      to={node.fields.slug}\n                      rel=\"bookmark\"\n                    >\n                      {title}\n                    </Link>\n                  </h3>\n                  <small>\n                    {formatPostDate(node.frontmatter.date, langKey)}\n                    {` ‚Ä¢ ${formatReadingTime(node.timeToRead)}`}\n                  </small>\n                </header>\n                <p\n                  dangerouslySetInnerHTML={{__html: node.frontmatter.spoiler}}\n                />\n              </article>\n            );\n          })}\n        </main>\n        <Footer />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndexTemplate;\n\nexport const pageQuery = graphql`\n  query($langKey: String!) {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { langKey: { eq: $langKey } } }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            langKey\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}